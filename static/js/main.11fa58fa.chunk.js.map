{"version":3,"sources":["components/TimeStamp.js","components/ChatEntry.js","components/ChatLog.js","App.js","registerServiceWorker.js","index.js"],"names":["TimeStamp","props","time","DateTime","fromISO","absolute","toFormat","relative","toRelative","title","ChatEntry","heartButton","liked","LocalRemote","id","className","sender","body","timeStamp","onClick","toggleHeart","ChatLog","entries","map","entry","App","useState","chatMessages","messages","setMessages","callingHeartTally","reduce","total","heart","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qmHAUeA,EARG,SAACC,GACjB,IAAMC,EAAOC,WAASC,QAAQH,EAAMC,MAC9BG,EAAWH,EAAKI,SAAS,2BACzBC,EAAWL,EAAKM,aAEtB,OAAO,sBAAMC,MAAOJ,EAAb,SAAwBE,KCsClBG,EAxCG,SAACT,GACjB,IAAMU,EAAcV,EAAMW,MAAQ,eAAO,eACnCC,EACJZ,EAAMa,GAAK,IAAM,EAAI,mBAAqB,oBAG5C,OACE,sBAAKC,UAAS,UAAKF,GAAeC,GAAIb,EAAMa,GAA5C,UACE,oBAAIC,UAAU,aAAd,SAA4Bd,EAAMe,SAClC,0BAASD,UAAU,eAAnB,UACE,4BAAId,EAAMgB,OAEV,cAAC,EAAD,CAAWF,UAAU,aAAab,KAAMD,EAAMiB,YAG9C,wBACEH,UAAU,OACVI,QAAS,WACPlB,EAAMmB,YAAYnB,EAAMa,KAH5B,SAMGH,WCQIU,EA9BC,SAACpB,GACf,IAAMqB,EAAUrB,EAAMqB,QAAQC,KAAI,SAACC,GACjC,OACE,cAAC,EAAD,CAEEV,GAAIU,EAAMV,GACVE,OAAQQ,EAAMR,OACdC,KAAMO,EAAMP,KACZC,UAAWM,EAAMN,UACjBN,MAAOY,EAAMZ,MACbQ,YAAanB,EAAMmB,aANdI,EAAMV,OAUjB,OAAO,qBAAKC,UAAU,WAAf,SAA2BO,KC0BrBG,EAvCH,WACV,MAAgCC,mBAASC,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAoBMC,EAA+BF,EALtBG,QAAO,SAACC,EAAOC,GAC1B,OAAOD,EAAQC,EAAMrB,QACpB,GAKL,OACE,sBAAKE,GAAG,MAAR,UACE,iCACE,0CAAagB,EAAb,sBAEF,+BACE,cAAC,EAAD,CACEf,UAAU,WACVO,QAASM,EACTR,YA7BY,SAACN,GACnBe,GAAY,SAACD,GAAD,OACVA,EAASL,KAAI,SAACC,GACZ,OAAIA,EAAMV,KAAOA,EACR,2BAAKU,GAAZ,IAAmBZ,OAAQY,EAAMZ,QAE1BY,iBCJXU,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCzEjEC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,IAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,IAAN,sBAEP5B,IAiDV,SAAiCO,GAE/BwB,MAAMxB,GACHI,MAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7BT,OAAOC,SAASoC,eAKpBjC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEArEAoB,CAAwBjC,GAIxBC,UAAUC,cAAc4B,MAAM1B,MAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,OCzCxBkC,K","file":"static/js/main.11fa58fa.chunk.js","sourcesContent":["import { DateTime } from 'luxon';\n\nconst TimeStamp = (props) => {\n  const time = DateTime.fromISO(props.time);\n  const absolute = time.toFormat('MMMM Do YYYY, h:mm:ss a');\n  const relative = time.toRelative();\n\n  return <span title={absolute}>{relative}</span>;\n};\n\nexport default TimeStamp;\n","import React from 'react';\nimport './ChatEntry.css';\nimport PropTypes from 'prop-types';\nimport TimeStamp from './TimeStamp';\n\nconst ChatEntry = (props) => {\n  const heartButton = props.liked ? '‚ù§Ô∏è' : 'ü§ç';\n  const LocalRemote =\n    props.id % 2 === 0 ? 'chat-entry local' : 'chat-entry remote';\n \n\n  return (\n    <div className={`${LocalRemote}`} id={props.id}>\n      <h2 className=\"entry-name\">{props.sender}</h2>\n      <section className=\"entry-bubble\">\n        <p>{props.body}</p>\n\n        <TimeStamp className=\"entry-time\" time={props.timeStamp} />\n\n        {/* need to import toggleheart function */}\n        <button\n          className=\"like\"\n          onClick={() => {\n            props.toggleHeart(props.id);\n          }}\n        >\n          {heartButton}\n        </button>\n      </section>\n    </div>\n  );\n};\n\nChatEntry.propTypes = {\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      sender: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n      time: PropTypes.string.isRequired,\n      liked: PropTypes.bool.isRequired,\n      toggleHeart: PropTypes.func.isRequired,\n    })\n  ),\n};\nexport default ChatEntry;\n","import React from 'react';\nimport ChatEntry from './ChatEntry';\nimport PropTypes from 'prop-types';\n\nconst ChatLog = (props) => {\n  const entries = props.entries.map((entry) => {\n    return (\n      <ChatEntry\n        key={entry.id}\n        id={entry.id}\n        sender={entry.sender}\n        body={entry.body}\n        timeStamp={entry.timeStamp}\n        liked={entry.liked}\n        toggleHeart={props.toggleHeart}\n      />\n    );\n  });\n  return <div className=\"chat-log\">{entries}</div>;\n};\n\nChatLog.propTypes = {\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      sender: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n      timeStamp: PropTypes.string.isRequired,\n      liked: PropTypes.bool.isRequired,\n    })\n  ),\n  toggleHeart: PropTypes.func.isRequired,\n};\n\nexport default ChatLog;\n","import React, { useState } from 'react';\nimport './App.css';\nimport chatMessages from './data/messages.json';\nimport ChatLog from './components/ChatLog';\n\nconst App = () => {\n  const [messages, setMessages] = useState(chatMessages);\n\n  const toggleHeart = (id) => {\n    setMessages((messages) =>\n      messages.map((entry) => {\n        if (entry.id === id) {\n          return { ...entry, liked: !entry.liked };\n        } else {\n          return entry;\n        }\n      })\n    );\n  };\n\n  const heartTally = (param) => {\n    return param.reduce((total, heart) => {\n      return total + heart.liked;\n    }, 0);\n  };\n\n  const callingHeartTally = heartTally(messages);\n\n  return (\n    <div id=\"App\">\n      <header>\n        <h1>ChatLog {callingHeartTally} ‚ù§Ô∏ès</h1>\n      </header>\n      <main>\n        <ChatLog\n          className=\"chat-log\"\n          entries={messages}\n          toggleHeart={toggleHeart}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}